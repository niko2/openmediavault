#!/usr/bin/env python3
#
# This file is part of OpenMediaVault.
#
# @license   http://www.gnu.org/licenses/gpl.html GPL Version 3
# @author    Volker Theile <volker.theile@openmediavault.org>
# @copyright Copyright (c) 2009-2020 Volker Theile
#
# OpenMediaVault is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# OpenMediaVault is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with OpenMediaVault. If not, see <http://www.gnu.org/licenses/>.
import os
import sys
import argparse
import openmediavault
import openmediavault.log

__args = []


def list_scripts():
    scripts_dir = openmediavault.getenv('OMV_MKCONF_SCRIPTS_DIR')
    names = [
        name for name in os.listdir(scripts_dir)
        if os.path.isfile(os.path.join(scripts_dir, name))
    ]
    names.sort()
    print("\n".join(names))


def execute_script():
    global __args
    # Test if the script exists.
    scripts_dir = openmediavault.getenv('OMV_MKCONF_SCRIPTS_DIR')
    path = os.path.join(scripts_dir, __args.name)
    if not os.path.exists(path):
        openmediavault.log.error(
            "The script '%s' does not exist", path, verbose=__args.verbose
        )
        sys.exit(100)
    # Test if the script is executable.
    if not os.access(path, os.X_OK):
        openmediavault.log.error(
            "The script '%s' is not executable", path, verbose=__args.verbose
        )
        sys.exit(101)
    # Execute the script. Please note:
    # - the first argument, by convention, should point to the filename
    #   associated with the file being executed.
    # - os.execv execute a new program, replacing the current process;
    #   it won't return. The return code of the script will be returned.
    os.execv(path, [path] + __args.args)


def main():
    global __args
    rc = 0
    parser = argparse.ArgumentParser(
        description="Generates the specified configuration files."
    )
    parser.add_argument(
        "-l",
        "--list",
        default=False,
        action="store_true",
        help="list available scripts and exit"
    )
    parser.add_argument(
        "-q",
        "--quiet",
        default=True,
        action="store_false",
        dest="verbose",
        help="quiet mode, no error messages are generated"
    )
    group = parser.add_argument_group()
    group.add_argument(
        "name", nargs="?", help="the name of the script to be executed"
    )
    group.add_argument(
        "args",
        nargs=argparse.REMAINDER,
        help="extra arguments to the executed script"
    )
    __args = parser.parse_args()
    if __args.list:
        list_scripts()
    else:
        if __args.name is None:
            parser.print_help()
        else:
            rc = execute_script()
    return rc


if __name__ == "__main__":
    sys.exit(main())
